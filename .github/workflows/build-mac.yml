name: Build the application for macOS

on:
  push:
    branches:
      - master
      - release/*
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14]

    name: build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Retrieve the version
        id: gitver
        run: |
          echo "app_version=$(git describe --tags --abbrev=4)" >> $GITHUB_OUTPUT

      - name: Prepare macOS
        run: |
          brew install tree create-dmg

      - name: Set up python venv
        run: |
          python -m venv ${GITHUB_WORKSPACE}/.venv
          source ${GITHUB_WORKSPACE}/.venv/bin/activate
          pip install --upgrade pip
          pip install conan==1.66.0 ninja

      - name: Specify conan remotes
        run: |
          source ${GITHUB_WORKSPACE}/.venv/bin/activate
          conan remote add peclet http://conan.kpas.alev.pro False

      - name: Make build directory
        run: mkdir build && mkdir unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}

      - name: Install dependencies
        working-directory: ./build
        run: |
          source ${GITHUB_WORKSPACE}/.venv/bin/activate
          conan install .. -s compiler.version=14.0

      - name: Build the application
        working-directory: ./build
        run: |
          source ${GITHUB_WORKSPACE}/.venv/bin/activate
          conan build ..
          tree .
          otool -L ./bin/unixcmd.app/Contents/MacOS/unixcmd

      - name: Generate package
        run: |
          source ${GITHUB_WORKSPACE}/.venv/bin/activate
          conan package -bf ./build -pf ./unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }} .
          tree ./unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}

      - name: Sign the package
        run: |
          source ${GITHUB_WORKSPACE}/.venv/bin/activate
          echo "$APPLE_DEV_CERT" | base64 --decode > ./cert.p12
          security create-keychain -p password unixcmd.keychain
          security list-keychains -s unixcmd.keychain
          security unlock-keychain -p password unixcmd.keychain
          security import cert.p12 -k unixcmd.keychain -P ${{ secrets.APPLE_DEV_CERT_PW }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k password unixcmd.keychain
          codesign -s "Developer ID Application: ${{ secrets.APPLE_AUTHOR_NAME }} (${{ secrets.APPLE_TEAM_ID }})" --force --deep --options runtime ./unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}/unixcmd.app
        env:
          APPLE_DEV_CERT: ${{ secrets.APPLE_DEV_CERT }}

      - name: Creating dmg and apply to the notary
        run: |
          mkdir unixcmd-dmg
          cp -af ./unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}/unixcmd.app ./unixcmd-dmg/
          create-dmg --volname "UnixCMD" \
            --window-pos 200 120 --window-size 500 300 \
            --icon-size 100 --icon "UnixCMD.app" 100 100 \
            --app-drop-link 400 100 \
            --hide-extension "UnixCMD.app" \
            unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}.dmg ./unixcmd-dmg
          xcrun notarytool submit unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}.dmg --apple-id "${{ secrets.APPLE_ID }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --password "${{ secrets.APPLE_NOTARIZATION_PASSWORD }}" --wait
          xcrun stapler staple unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}.dmg

      - name: Uploading archive
        uses: actions/upload-artifact@v4
        if: ${{ !startsWith(github.ref_name, 'release/') && github.ref_type != 'tag' }}
        with:
          name: unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}
          path: unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}.dmg

      - name: Publish prerelease
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref_name, 'release/') }}
        with:
          prerelease: true
          draft: true
          name: "Release candidate ${{ steps.gitver.outputs.app_version }}"
          files:
            unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}.dmg

      - name: Publish release
        uses: softprops/action-gh-release@v2
        if: ${{ github.ref_type == 'tag' }}
        with:
          files:
            unixcmd-${{ steps.gitver.outputs.app_version }}-${{ matrix.os }}.dmg
